#!/usr/bin/env python
# coding: utf-8

# # Яндекс Музыка

# Сравнение Москвы и Петербурга окружено мифами. Например:
#  * Москва — мегаполис, подчинённый жёсткому ритму рабочей недели;
#  * Петербург — культурная столица, со своими вкусами.
# 
# На данных Яндекс Музыки вы сравните поведение пользователей двух столиц.
# 
# **Цель исследования** — проверьте три гипотезы:
# 1. Активность пользователей зависит от дня недели. Причём в Москве и Петербурге это проявляется по-разному.
# 2. В понедельник утром в Москве преобладают одни жанры, а в Петербурге — другие. Так же и вечером пятницы преобладают разные жанры — в зависимости от города.
# 3. Москва и Петербург предпочитают разные жанры музыки. В Москве чаще слушают поп-музыку, в Петербурге — русский рэп.
# 
# **Ход исследования**
# 
# Данные о поведении пользователей вы получите из файла `yandex_music_project.csv`. О качестве данных ничего не известно. Поэтому перед проверкой гипотез понадобится обзор данных.
# 
# Вы проверите данные на ошибки и оцените их влияние на исследование. Затем, на этапе предобработки вы поищете возможность исправить самые критичные ошибки данных.
# 
# Таким образом, исследование пройдёт в три этапа:
#  1. Обзор данных.
#  2. Предобработка данных.
#  3. Проверка гипотез.
# 
# 

# ## Обзор данных
# 
# Составьте первое представление о данных Яндекс Музыки.
# 
# 
# 

# **Задание 1**

# In[2]:


import pandas as pd # импорт библиотеки pandas


# **Задание 2**

# In[3]:


df = pd.read_csv('/datasets/yandex_music_project.csv') # чтение файла с данными и сохранение в df


# **Задание 3**

# In[4]:


print(df.head(10)) # получение первых 10 строк таблицы df


# **Задание 4**

# In[5]:


df.info()# получение общей информации о данных в таблице df


# Количество значений в столбцах различается. Значит, в данных есть пропущенные значения.

# **Задание 5**

# In[12]:


# Напишите ваш ответ здесь комментарием. Не удаляйте символ #. Не меняйте тип этой ячейки на Markdown.


# **Выводы**
# 
# В каждой строке таблицы — данные о прослушанном треке. Часть колонок описывает саму композицию: название, исполнителя и жанр. Остальные данные рассказывают о пользователе: из какого он города, когда он слушал музыку.
# 
# Предварительно можно утверждать, что данных достаточно для проверки гипотез. Но встречаются пропуски в данных, а в названиях колонок — расхождения с хорошим стилем.
# 
# Чтобы двигаться дальше, нужно устранить проблемы в данных.

# ## Предобработка данных

# ### Переименование столбцов
# 
# **Задание 6**

# In[6]:


print(df.columns) # перечень названий столбцов таблицы df


# **Задание 7**

# In[7]:


df = df.rename(columns={'  userID':'user_id','Track':'track','  City  ':'city','Day':'day'}) # переименование столбцов


# **Задание 8**

# In[8]:


print(df.columns) # проверка результатов - перечень названий столбцов


# ### Обработка пропущенных значений
# 
# **Задание 9**

# In[9]:


print(df.isna().sum()) # подсчёт пропусков


# **Задание 10**

# In[10]:


df['track'] = df['track'].fillna('unknown')
df['artist'] = df['artist'].fillna('unknown')
df['genre'] = df['genre'].fillna('unknown') # замена пропущенных значений на 'unknown'


# **Задание 11**

# In[11]:


print(df.isna().sum()) # проверка на отсутствие пропусков


# ### Обработка дубликатов
# 
# **Задание 12**

# In[12]:


df.duplicated().sum()# подсчёт явных дубликатов


# **Задание 13**

# In[13]:


df = df.drop_duplicates().reset_index(drop=True) # удаление явных дубликатов, создание новых индексов и удаление старых


# **Задание 14**

# In[14]:


df.duplicated().sum() # проверка на отсутствие явных дубликатов


# **Задание 15**

# In[15]:


print(sorted(df['genre'].unique())) # просмотр уникальных отсортированных названий жанров


# **Задание 16**

# In[16]:


df['genre'] = df['genre'].replace('hip','hiphop')
df['genre'] = df['genre'].replace('hop','hiphop')
df['genre'] = df['genre'].replace('hip-hop','hiphop')
# устранение неявных дубликатов


# **Задание 17**

# In[17]:


print(sorted(df['genre'].unique())) # проверка на отсутствие неявных дубликатов


# **Выводы**
# 
# Предобработка обнаружила три проблемы в данных:
# 
# - нарушения в стиле заголовков,
# - пропущенные значения,
# - дубликаты — явные и неявные.
# 
# Вы исправили заголовки, чтобы упростить работу с таблицей. Без дубликатов исследование станет более точным.
# 
# Пропущенные значения вы заменили на `'unknown'`. Ещё предстоит увидеть, не повредят ли исследованию пропуски в колонке `genre`.
# 
# Теперь можно перейти к проверке гипотез.

# ## Проверка гипотез

# ### Сравнение поведения пользователей двух столиц

# Первая гипотеза утверждает, что пользователи по-разному слушают музыку в Москве и Санкт-Петербурге. Проверим это предположение по данным о трёх днях недели — понедельнике, среде и пятнице. Для этого:
# 
# * Разделим пользователей Москвы и Санкт-Петербурга.
# * Сравним, сколько треков послушала каждая группа пользователей в понедельник, среду и пятницу.
# 

# **Задание 18**
# 
# 

# In[18]:


df_city = df.groupby('city')['user_id'].count() # подсчёт прослушиваний в каждом городе
print(df_city)


# **Задание 19**
# 

# In[19]:


df_day = df.groupby('day')['user_id'].count() # подсчёт прослушиваний в каждый из трёх дней
print(df_day)


# **Задание 20**

# In[44]:


def number_tracks(day, city):
    track_list = df[df['day'] == day]
    track_list = track_list[track_list['city'] == city] # выберите только строки track_list со значением переменной city в столбце city
    track_list_count = track_list['user_id'].count() # вызовите метод подсчета строк для track_list и выберите столбец user_id
    return track_list_count # верните значение track_list_count из функции
  
  


# **Задание 21**

# In[70]:


number_tracks('Monday', 'Moscow') # количество прослушиваний в Москве по понедельникам


# In[75]:


number_tracks('Monday', 'Saint-Petersburg')# количество прослушиваний в Санкт-Петербурге по понедельникам


# In[76]:


number_tracks('Wednesday', 'Moscow')# количество прослушиваний в Москве по средам


# In[77]:


number_tracks('Wednesday', 'Saint-Petersburg')# количество прослушиваний в Санкт-Петербурге по средам


# In[78]:


number_tracks('Friday', 'Moscow')# количество прослушиваний в Москве по пятницам


# In[79]:


number_tracks('Friday', 'Saint-Petersburg')# количество прослушиваний в Санкт-Петербурге по пятницам


# **Задание 22**

# In[35]:


import pandas as pd
info = pd.DataFrame({
    'city': ['Moscow', 'Saint-Petersburg'],
    'Monday': [15740, 5614],
    'Wednesday':[11056, 7003],
    'Friday': [15945, 5895]
    
}) # создание таблицы с результатами
print(info) # вывод таблицы на экран


# **Выводы**
# 
# Данные показывают разницу поведения пользователей:
# 
# - В Москве пик прослушиваний приходится на понедельник и пятницу, а в среду заметен спад.
# - В Петербурге, наоборот, больше слушают музыку по средам. Активность в понедельник и пятницу здесь почти в равной мере уступает среде.
# 
# Значит, данные говорят в пользу первой гипотезы.

# ### Музыка в начале и в конце недели

# Согласно второй гипотезе, утром в понедельник в Москве преобладают одни жанры, а в Петербурге — другие. Так же и вечером пятницы преобладают разные жанры — в зависимости от города.

# **Задание 23**

# In[65]:


moscow_general = df[df['city'] == 'Moscow'] # получение таблицы moscow_general из тех строк таблицы df, для которых значение в столбце 'city' равно 'Moscow'


# In[66]:


spb_general = df[df['city'] == 'Saint-Petersburg'] # получение таблицы spb_general из тех строк таблицы df, для которых значение в столбце 'city' равно 'Saint-Petersburg'


# **Задание 24**

# In[47]:


def genre_weekday(df, day, time1, time2):
    # последовательная фильтрация
    # оставляем в genre_df только те строки df, у которых день равен day
    genre_df = df[df['day'] == day] # ваш код здесь
    # оставляем в genre_df только те строки genre_df, у которых время меньше time2
    genre_df = genre_df[genre_df['time'] < time2] # ваш код здесь
    # оставляем в genre_df только те строки genre_df, у которых время больше time1
    genre_df = genre_df[genre_df['time'] > time1] # ваш код здесь
    # сгруппируем отфильтрованный датафрейм по столбцу с названиями жанров, возьмём столбец genre и посчитаем кол-во строк для каждого жанра методом count()
    genre_df_grouped = genre_df.groupby('genre')['genre'].count() # ваш код здесь
    # отсортируем результат по убыванию (чтобы в начале Series оказались самые популярные жанры)
    genre_df_sorted = genre_df_grouped.sort_values(ascending=False) # ваш код здесь
    # вернём Series с 10 самыми популярными жанрами в указанный отрезок времени заданного дня
    return genre_df_sorted[:10]
   


# **Задание 25**

# In[54]:


genre_weekday(moscow_general, 'Monday', '07:00', '11:00') # вызов функции для утра понедельника в Москве (вместо df — таблица moscow_general)


# In[56]:


genre_weekday(spb_general, 'Monday', '07:00', '11:00')# вызов функции для утра понедельника в Петербурге (вместо df — таблица spb_general)


# In[60]:


genre_weekday(moscow_general, 'Friday', '17:00', '23:00') # вызов функции для вечера пятницы в Москве


# In[59]:


genre_weekday(spb_general, 'Friday', '17:00', '23:00') # вызов функции для вечера пятницы в Петербурге


# **Выводы**
# 
# Если сравнить топ-10 жанров в понедельник утром, можно сделать такие выводы:
# 
# 1. В Москве и Петербурге слушают похожую музыку. Единственное различие — в московский рейтинг вошёл жанр “world”, а в петербургский — джаз и классика.
# 
# 2. В Москве пропущенных значений оказалось так много, что значение `'unknown'` заняло десятое место среди самых популярных жанров. Значит, пропущенные значения занимают существенную долю в данных и угрожают достоверности исследования.
# 
# Вечер пятницы не меняет эту картину. Некоторые жанры поднимаются немного выше, другие спускаются, но в целом топ-10 остаётся тем же самым.
# 
# Таким образом, вторая гипотеза подтвердилась лишь частично:
# * Пользователи слушают похожую музыку в начале недели и в конце.
# * Разница между Москвой и Петербургом не слишком выражена. В Москве чаще слушают русскую популярную музыку, в Петербурге — джаз.
# 
# Однако пропуски в данных ставят под сомнение этот результат. В Москве их так много, что рейтинг топ-10 мог бы выглядеть иначе, если бы не утерянные  данные о жанрах.

# ### Жанровые предпочтения в Москве и Петербурге
# 
# Гипотеза: Петербург — столица рэпа, музыку этого жанра там слушают чаще, чем в Москве.  А Москва — город контрастов, в котором, тем не менее, преобладает поп-музыка.

# **Задание 26**

# In[71]:


moscow_genres = moscow_general.groupby('genre')['genre'].count() # одной строкой: группировка таблицы moscow_general по столбцу 'genre', выбор столбца `genre`, подсчёт числа значений 'genre' методом count(), сохранение в moscow_genres
moscow_genres = moscow_genres.sort_values(ascending=False) # сортировка получившегося Series в порядке убывания и сохранение обратно в moscow_genres


# **Задание 27**

# In[72]:


moscow_genres.head(10) # просмотр первых 10 строк moscow_genres


# **Задание 28**

# In[74]:


spb_genres = spb_general.groupby('genre')['genre'].count() # одной строкой: группировка таблицы spb_general по столбцу 'genre', выбор столбца `genre`, подсчёт числа значений 'genre' методом count(), сохранение в spb_genres
spb_genres = spb_genres.sort_values(ascending=False) # сортировка получившегося Series в порядке убывания и сохранение обратно в spb_genres


# **Задание 29**

# In[75]:


spb_genres.head(10) # просмотр первых 10 строк spb_genres


# **Выводы**

# Гипотеза частично подтвердилась:
# * Поп-музыка — самый популярный жанр в Москве, как и предполагала гипотеза. Более того, в топ-10 жанров встречается близкий жанр — русская популярная музыка.
# * Вопреки ожиданиям, рэп одинаково популярен в Москве и Петербурге.
# 

# ## Итоги исследования

# Вы проверили три гипотезы и установили:
# 
# 1. День недели по-разному влияет на активность пользователей в Москве и Петербурге.
# 
# Первая гипотеза полностью подтвердилась.
# 
# 2. Музыкальные предпочтения не сильно меняются в течение недели — будь то Москва или Петербург. Небольшие различия заметны в начале недели, по понедельникам:
# * в Москве слушают музыку жанра “world”,
# * в Петербурге — джаз и классику.
# 
# Таким образом, вторая гипотеза подтвердилась лишь отчасти. Этот результат мог оказаться иным, если бы не пропуски в данных.
# 
# 3. Во вкусах пользователей Москвы и Петербурга больше общего, чем различий. Вопреки ожиданиям, предпочтения жанров в Петербурге напоминают московские.
# 
# Третья гипотеза не подтвердилась. Если различия в предпочтениях и существуют, на основной массе пользователей они незаметны.
# 
# **На практике исследования содержат проверки статистических гипотез.**
# Из части данных одного сервиса невозможно сделать какие-то выводы о всех пользователях сервиса без методов статистики.
# Проверки статистических гипотез покажут, насколько они достоверны, исходя из имеющихся данных.
# С методами проверок гипотез вы ещё познакомитесь в следующих темах.
